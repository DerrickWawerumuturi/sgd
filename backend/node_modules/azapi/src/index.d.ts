import {AzureFunction, Context, HttpRequest} from '@azure/functions';

export interface ContextWrapper extends Context {
  on(event: string, handler: any): void;
  emit(event: string, params?: any): void;
  dispose(): void;
}

export function useContext(): ContextWrapper;

export function useContext<T>(value: ContextWrapper, func: () => T): T;

export function useEnv(): StringMap;

export function useRequest(): HttpRequest;

export function useQuery(): StringMap;

export function useBody(): {[key: string]: any};

export function useHeaders(): [StringMap, Setter<StringMap>];

export function useHeader(name: string): [string, Setter<string>];

export function useContentType(): [string, Setter<string>];

export function useAuthorization(): [string, Setter<string>];

export function useParams(): any;

export function useEffect(effect: Effect): void;

export function useStatus(status: number): void;

export function useState<T>(
  name: string,
  defaultValue?: (() => T) | T,
): [T, Setter<T>, Getter<T>];

export function useCache<T>(
  name: string,
  defaultValue: T | ((options?: any) => CacheItem<T>),
  options: CacheOptions,
): [T, CacheSetter<T>, Getter<T>];

export default function (api: Function): AzureFunction;

export function UNSAFE_setEnv(value: StringMap): void;

export const MemoryCacheStrategy: MemoryCacheStrategy;

export interface EventHandler<T> {
  (args?: T): void;
}

export interface Getter<T> {
  (): T;
}

export interface Setter<T> {
  (value: T): void;
}

export interface Effect extends EventHandler<Context> {}

export interface CacheSetter<T> {
  (value: T | ((prev: T) => T), metadata?: CacheMetadata): void;
}

export interface CacheMetadata {
  expire?: number | Date | string;
}

export interface CacheItem<T> extends CacheMetadata {
  value: T;
}

export interface CacheOptions {
  strategy?: CachingStrategyFactory;
  [key: string]: any;
}

export interface CachingStrategyFactory {
  (...args: any[]): CachingStrategy;
}

export interface CachingStrategy {
  get(name: string): any;
  set(name: string, value: any);
}

export interface StringMap {
  [key: string]: string;
}

export interface MemoryCacheStrategy extends CachingStrategyFactory {
  reset();
}

export function UNSAFE_createContext(
  req?: any,
  res?: any,
  props?: any,
): ContextWrapper;
