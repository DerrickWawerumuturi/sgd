import MemoryCacheStrategy from '../cachingStrategies/MemoryCacheStrategy';

export default function useCache(
  name,
  defaultValue,
  {strategy, ...options} = {},
) {
  if (!strategy) {
    strategy = MemoryCacheStrategy(options);
  }

  let current;

  function load() {
    current = strategy.get(name);
    if (!current || isExpire(current)) {
      // is expired or not created yet
      current = createItem(defaultValue, options);
      strategy.set(name, current);
    }
  }

  function get() {
    load();
    return current.value;
  }

  function set(value, metadata) {
    if (typeof value === 'function') {
      value = value(current.value, options);
    }
    const next = {value, date: new Date()};
    if (metadata) {
      Object.assign(next, metadata);
    } else {
      next.expire = current.expire;
    }

    strategy.set(name, (current = next));
  }

  return [get(), set, get];
}

function createItem(defaultValue, options, prev) {
  const item =
    typeof defaultValue === 'function'
      ? defaultValue(options)
      : {value: defaultValue};
  // not change
  if (prev && !isExpire(prev) && prev.value === item.value) {
    return;
  }
  item.date = new Date();
  return item;
}

function isExpire({expire, date}) {
  if (!expire) {
    return false;
  }

  const now = new Date().getTime();
  let expiredOn;
  // expire after ms
  if (typeof expire === 'number') {
    expiredOn =
      (date instanceof Date ? date.getTime() : new Date(date).getTime()) +
      expire;
  }
  // expired on specified date
  else if (!(expire instanceof Date)) {
    expiredOn = new Date(expire);
  } else {
    expiredOn = expire;
  }

  return expiredOn < now;
}
