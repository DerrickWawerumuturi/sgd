import iscope from 'iscope';

const useContextScope = iscope(() => null);

export default function useContext(context, func) {
  if (!arguments.length) {
    return useContextScope();
  }
  applyInterface(context);
  return useContextScope(context, func);
}

export function applyInterface(context) {
  if (context.__appliedInterface) {
    return context;
  }
  context.__appliedInterface = true;

  const on = {};

  Object.assign(context, {
    on(name, handler) {
      let handlers = on[name];
      if (!handlers) {
        on[name] = handlers = new Set();
      }
      handlers.add(handler);
      return () => handlers.delete(handler);
    },
    emit(name, params = context) {
      const handlers = on[name];

      if (!handlers) {
        return;
      }

      return Array.from(handlers).reduce((prev, handler) => {
        if (prev && typeof prev.then === 'function') {
          return prev.finally(() => {
            return handler(params);
          });
        } else {
          return handler(params);
        }
      }, null);
    },
    dispose() {
      context.emit('disposing');
    },
  });

  return context;
}

export function UNSAFE_createContext(req, res, props) {
  return applyInterface({
    req,
    res,
    ...props,
  });
}
